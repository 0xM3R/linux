#ifndef FPGA_H_
#define FPGA_H_

#include <linux/module.h>
#include <linux/kernel.h>	/* printk() */
#include <linux/moduleparam.h>
#include <asm/uaccess.h>
#include <asm/pgtable.h>
#include <linux/fs.h>
#include <linux/gfp.h>
#include <linux/cdev.h>
#include <linux/sched.h>
#include <linux/interrupt.h>
#include <asm/io.h>  //ioremap
#include <linux/mm.h>
#include <linux/ioctl.h>
#include <linux/platform_device.h>
#include <linux/kdev_t.h>
#include <linux/proc_fs.h>
#include <linux/wait.h>
 



typedef struct 
{
	char REC[256]; //Data generated by external system(256 byte/packet)
	int DATA; //Current counter value
	int MATCH; //Generate interrupt value (compared to DATA)
	int START; //Start value for counter
	int END; // End value for counter
	int ENABLE; // Write 1 to enable counter
	int DISABLE; //Write 1 to disable counter
	int STATUS; // Interrupt status register (how many times interrupt occured)
	int CLEAR; // Write 1 to enable interrupt
}FPGA;

const int buf_size = 8192;
const unsigned int fpga_count = 1;
const dev_t fpga_dev = MKDEV(400,1);

#endif /*FPGA_H_*/
